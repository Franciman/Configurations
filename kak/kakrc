# ------------------------------------------------------------------------------------------------------
# Generic definitions and hooks

hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines
}

define-command ide %[
    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    new rename-client docs
    set global docsclient docs
]

define-command lsp-ide %[
    new 'rename-client docs; edit -scratch *lsp-hover*'
    set global docsclient docs
]

# ------------------------------------------------------------------------------------------------------
# C++

define-command -hidden cpp-indent-on-colon %[
    try %[
        exec -draft <a-x> <a-k>\h*(public|private|protected)<ret> <lt>
    ]
]

hook global WinSetOption filetype=cpp %[

    hook window InsertChar : cpp-indent-on-colon

    # hook buffer BufWritePost .* clang-parse

    set-option -add window clang_options ' -std=c++14'

     #%sh[
        #flags_finder='/home/francesco/Projects/ClangConfReader/clang_conf_reader'
        #flags=$($flags_finder)
        #echo "set buffer clang_options '$flags'"
    #]

    # alias window lint clang-parse
    # alias window lint-next clang-diagnostics-next

    # alias window parse clang-parse
    # alias window next clang-diagnostics-next

    # clang-enable-autocomplete
    # clang-enable-diagnostics

]

#---------------------------------------------------------------------------------------------
# Ergonomic maps

map global user y %{<a-|>xclip -i -selection clipboard<ret>} -docstring "yank to clipboard"
map global user p %{!xclip -o -selection clipboard<ret>} -docstring "Paste from clipboard"
map global user d %{,yd} -docstring "yank to clipboard and delete"

map global normal <c-e> vj
map global normal <c-y> vk

# Vim-esque split
define-command sp -params 1 -file-completion %[
    new edit %arg[1]
]

define-command sb -params 1 -buffer-completion %[
    sp %arg[1]
]

# -------------------------------------------------------------------------------------------------
# Haskell & Scheme

define-command open-cabal %{
    evaluate-commands %sh{

        entry=$(ls | grep '.cabal' | head -n 1)
        while [ "$(pwd)" != '/home/francesco/Projects' -a -z "$entry" ]; do
            cd ..
            entry=$(ls | grep '.cabal' | head -n 1)
        done
        if [ -z "$entry" ]; then
            printf "fail 'Could not find cabal file'\n"
        else
            curr_dir=$(pwd)
            base=$(basename "$entry")
            printf "edit '%s/%s'\n" "$curr_dir" "$base"
        fi
    }
}

define-command hask-start %{
    repl ghcid
    cd src
    open-cabal
}

define-command -docstring %{Create newline and align cursor this column} align-next-line-to-col %{
    execute-keys -itersel 'Z<a-o>j<a-z>a&<space>i'
}

map global user o ':align-next-line-to-col<ret>' -docstring 'Create newline and align cursor to this column'

hook global WinSetOption filetype=(haskell|scheme) %[
    map window insert <tab> '<a-;><gt>'
    map window insert <s-tab> '<a-;><lt>'
]

# --------------------------------------------------------------------------------------------------
# Python

hook global WinSetOption filetype=python %[
    map window insert <tab> '<a-;><gt>'
    map window insert <s-tab> '<a-;><lt>'
]


# --------------------------------------------------------------------------------------------------
# Rust

define-command racer-type-signature %[
    echo %sh{
        cursor="${kak_cursor_line} $((${kak_cursor_column} - 1))"
        # TODO: Maybe we should use a substitute file,
        # even if I don't think i'll keep on writing when waiting for infos
        racer_data=$(racer --interface tab-text find-definition ${cursor} ${kak_buffile})
        definition=$(printf %s\\n "${racer_data}" | awk '
            BEGIN { FS = "\t" }
            /^MATCH/ {
                print $7
            }'
        )

        printf "%%[%s]" "${definition}"
    }
]

hook global WinSetOption filetype=rust %[
    racer-enable-autocomplete
    map global user s ':racer-type-signature<ret>' -docstring "Get signature of rust function under the cursor"
]

#---------------------------------------------------------------------------------------------------
# Blog post commands

declare-option str blog_post_template '<lt>div<gt><ret><lt>h2<gt><lt>/h2<gt><ret><lt>p<gt><lt>/p<gt><ret><lt>/div<gt>'
define-command new-blog-post %{
    exec "/<lt>body<gt><ret>jo%opt{blog_post_template}<esc>k<gt>k<gt>glbhhi"
}

# --------------------------------------------------------------------------------------------------
# Colorscheme

colorscheme palenight

# -------------------------------------------------------------------------------------------------
# Source local kakrc

define-command source-local-kakrc %{
    %sh{
        if [ "$PWD" != "/home/francesco/.config/kak" -a -f kakrc ];  then
            echo 'source kakrc'
        else
            echo 'nop'
        fi
    }
}

# --------------------------------------------------------------------------------------------------
# LSP

evaluate-commands %sh{
     kak-lsp --kakoune -s "$kak_session"
}

lsp-enable
lsp-stop-on-exit-enable
lsp-auto-hover-enable
lsp-auto-hover-insert-mode-disable

map global normal <c-l> ':enter-user-mode lsp<ret>'

# --------------------------------------------------------------------------------------------------
# tmux

define-command -hidden -params 1 tmux-select-pane %{
    nop %sh{
        tmux select-pane "$1"
    }
}
map global user j %{:tmux-select-pane '-D'<ret>} -docstring 'Select lower pane'
map global user k %{:tmux-select-pane '-U'<ret>} -docstring 'Select upper pane'
map global user h %{:tmux-select-pane '-L'<ret>} -docstring 'Select left pane'
map global user l %{:tmux-select-pane '-R'<ret>} -docstring 'Select right pane'

source "/home/francesco/.config/kak/perl_scripts.kak"

